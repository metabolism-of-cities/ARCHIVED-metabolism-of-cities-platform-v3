# Generated by Django 2.1.2 on 2018-10-28 02:11

from django.db import migrations, models
import tinymce.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='DatasetType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('description', models.TextField(blank=True, null=True)),
                ('flows', models.CharField(choices=[('destination_only', 'Destination only'), ('origin_only', 'Origin only'), ('origin_and_destination', 'Origin and destination')], default='origin_and_destination', max_length=25)),
                ('type', models.CharField(choices=[('stocks', 'Stocks'), ('flows', 'Flows')], default='flows', max_length=6)),
                ('image', models.ImageField(blank=True, null=True, upload_to='datasettype')),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='DQI',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=40)),
            ],
        ),
        migrations.CreateModel(
            name='DQIRating',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('score', models.PositiveSmallIntegerField()),
                ('description', models.CharField(max_length=255)),
            ],
            options={
                'ordering': ['score'],
            },
        ),
        migrations.CreateModel(
            name='Feature',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('description', models.TextField(blank=True, null=True)),
                ('show_in_table', models.BooleanField(default=False)),
            ],
            options={
                'ordering': ['id'],
            },
        ),
        migrations.CreateModel(
            name='GraphType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('title', models.CharField(max_length=255)),
                ('type', models.CharField(choices=[('line', 'Line chart'), ('bar', 'Bar chart'), ('pie', 'Pie chart')], default='line', max_length=25)),
                ('url', models.CharField(blank=True, max_length=255, null=True)),
                ('notes', tinymce.models.HTMLField(blank=True, null=True, verbose_name='Content')),
            ],
            options={
                'ordering': ['-created_at', '-updated_at'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Information',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('title', models.CharField(max_length=255)),
                ('content', tinymce.models.HTMLField(verbose_name='Content')),
            ],
            options={
                'ordering': ['-created_at', '-updated_at'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ReferenceSpace',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(db_index=True, max_length=255)),
                ('description', models.TextField(blank=True, null=True)),
                ('url', models.CharField(blank=True, max_length=255, null=True)),
                ('slug', models.SlugField(max_length=255, null=True)),
                ('image', models.ImageField(blank=True, null=True, upload_to='referencespace')),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='ReferenceSpaceCSV',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('name', models.CharField(max_length=255)),
                ('original_name', models.CharField(max_length=255)),
                ('imported', models.BooleanField()),
                ('how_obtained', models.TextField(blank=True, null=True)),
                ('gaps', models.TextField(blank=True, null=True)),
                ('source', models.CharField(blank=True, max_length=255, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='ReferenceSpaceFeature',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.TextField()),
            ],
        ),
        migrations.CreateModel(
            name='ReferenceSpaceLocation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=255, null=True)),
                ('lat', models.CharField(blank=True, max_length=20, null=True)),
                ('lng', models.CharField(blank=True, max_length=20, null=True)),
                ('default_zoom', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('timeframe', models.CharField(blank=True, max_length=255, null=True)),
                ('source', models.CharField(blank=True, max_length=255, null=True)),
                ('geojson', models.TextField(blank=True, null=True)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='ReferenceSpaceType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('slug', models.SlugField(max_length=255, unique=True)),
                ('type', models.CharField(choices=[('SOC', 'Socio-economic System'), ('NAT', 'Natural Environment')], max_length=3)),
                ('marker_color', models.CharField(blank=True, choices=[('green', 'Green'), ('blue', 'Blue'), ('darkblue', 'Dark Blue'), ('black', 'Black'), ('purple', 'Purple'), ('red', 'Red'), ('yellow', 'yellow'), ('orange', 'Orange'), ('white', 'White')], default='blue', max_length=10, null=True)),
                ('user_accessible', models.BooleanField()),
            ],
        ),
        migrations.CreateModel(
            name='ReferenceSpaceTypeDescription',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('description', models.TextField()),
            ],
        ),
        migrations.CreateModel(
            name='Topic',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('icon', models.CharField(blank=True, max_length=255, null=True)),
                ('slug', models.SlugField(max_length=255, unique=True)),
                ('position', models.PositiveSmallIntegerField()),
                ('description', models.TextField(blank=True, null=True)),
            ],
            options={
                'ordering': ['position'],
            },
        ),
    ]
